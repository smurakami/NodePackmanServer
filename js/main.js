// Generated by CoffeeScript 1.10.0
(function() {
  var Main, Swipe;

  Swipe = (function() {
    function Swipe() {
      this.prev = {
        x: 0,
        y: 0
      };
      this.pos = {
        x: 0,
        y: 0
      };
      this.touching = false;
      this.swiped = false;
      this.threshold = 10;
      this.onleft = [];
      this.onright = [];
      this.onup = [];
      this.ondown = [];
      window.addEventListener('touchstart', (function(_this) {
        return function(e) {
          return _this.touchstarted(e);
        };
      })(this));
      window.addEventListener('touchmove', (function(_this) {
        return function(e) {
          return _this.touchmoved(e);
        };
      })(this));
      window.addEventListener('touchend', (function(_this) {
        return function(e) {
          return _this.touchended(e);
        };
      })(this));
      setInterval((function(_this) {
        return function() {
          return _this.update();
        };
      })(this), 33);
    }

    Swipe.prototype.update = function() {
      var dx, dy;
      if (!this.touching) {
        return;
      }
      if (this.swiped) {
        return;
      }
      dx = this.pos.x - this.prev.x;
      dy = this.pos.y - this.prev.y;
      if (Math.abs(dx) > Math.abs(dy)) {
        if (dx < -this.threshold) {
          this.swipedLeft();
          return this.swiped = true;
        } else if (dx > this.threshold) {
          this.swipedRight();
          return this.swiped = true;
        }
      } else {
        if (dy < -this.threshold) {
          this.swipedUp();
          return this.swiped = true;
        } else if (dy > this.threshold) {
          this.swipedDown();
          return this.swiped = true;
        }
      }
    };

    Swipe.prototype.swipedLeft = function() {
      var func, i, len, ref, results;
      ref = this.onleft;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        func = ref[i];
        results.push(func());
      }
      return results;
    };

    Swipe.prototype.swipedRight = function() {
      var func, i, len, ref, results;
      ref = this.onright;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        func = ref[i];
        results.push(func());
      }
      return results;
    };

    Swipe.prototype.swipedUp = function() {
      var func, i, len, ref, results;
      ref = this.onup;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        func = ref[i];
        results.push(func());
      }
      return results;
    };

    Swipe.prototype.swipedDown = function() {
      var func, i, len, ref, results;
      ref = this.ondown;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        func = ref[i];
        results.push(func());
      }
      return results;
    };

    Swipe.prototype.touchstarted = function(e) {
      var x, y;
      this.touching = true;
      x = e.touches[0].pageX;
      y = e.touches[0].pageY;
      this.prev.x = x;
      this.prev.y = y;
      this.pos.x = x;
      return this.pos.y = y;
    };

    Swipe.prototype.touchmoved = function(e) {
      var x, y;
      x = e.changedTouches[0].pageX;
      y = e.changedTouches[0].pageY;
      this.prev.x = this.pos.x;
      this.prev.y = this.pos.y;
      this.pos.x = x;
      return this.pos.y = y;
    };

    Swipe.prototype.touchended = function(e) {
      this.touching = false;
      this.swiped = false;
      this.prev.x = this.pos.x;
      return this.prev.y = this.pos.y;
    };

    return Swipe;

  })();

  this.swipe = new Swipe;

  Main = (function() {
    function Main() {
      this.init();
      this.initSocket();
      this.initController();
    }

    Main.prototype.init = function() {};

    Main.prototype.initSocket = function() {
      this.socket = new Socket();
      this.socket.onopen = (function(_this) {
        return function() {
          return _this.socket.send({
            event: "client_type",
            client_type: "player"
          });
        };
      })(this);
      return this.socket.onmessage = (function(_this) {
        return function(data) {
          console.log(data);
          return _this.onmessage(data);
        };
      })(this);
    };

    Main.prototype.initController = function() {
      swipe.onright.push((function(_this) {
        return function() {
          return _this.sendControl('right');
        };
      })(this));
      swipe.onleft.push((function(_this) {
        return function() {
          return _this.sendControl('left');
        };
      })(this));
      swipe.onup.push((function(_this) {
        return function() {
          return _this.sendControl('up');
        };
      })(this));
      return swipe.ondown.push((function(_this) {
        return function() {
          return _this.sendControl('down');
        };
      })(this));
    };

    Main.prototype.sendControl = function(control) {
      console.log(control);
      return this.socket.send({
        event: "control",
        control: control
      });
    };

    Main.prototype.onmessage = function(data) {
      var color;
      console.log(data);
      switch (data.event) {
        case 'color':
          console.log('color');
          color = data.color;
          return $('body').css('background-color', color);
      }
    };

    return Main;

  })();

  $(function() {
    var app;
    return app = new Main();
  });

}).call(this);
